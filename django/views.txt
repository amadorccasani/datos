****vistas basadas en clases***
from django.shortcuts import render,redirect
from django.urls import reverse_lazy
from django.core.paginator import Paginator
from django.core.exceptions import ObjectDoesNotExist
from django.views.generic import View,TemplateView,ListView,CreateView,UpdateView,DeleteView
from django.contrib.auth.mixins import PermissionRequiredMixin,LoginRequiredMixin

from django.urls import reverse_lazy
from .forms import AutorForm,LibroForm
from .models import Autor,Libro

class Inicio(LoginRequiredMixin, TemplateView):
	template_name = 'index.html'

class ListadoAutor(PermissionRequiredMixin,ListView):
        permission_required = 'app.add_category'
	model = Autor 
	context_object_name = 'autores'
	paginate_by = 5
	template_name = 'libro/autor/listar_autor.html'
	queryset = Autor.objects.filter(estado=True)

class CrearAutor(CreateView):
	model = Autor
	form_class  = AutorForm
	template_name = 'libro/autor/crear_autor.html'
	success_url = reverse_lazy('libro:listar_autor')

class ActualizarAutor(UpdateView):
	model = Autor
	form_class  = AutorForm
	template_name = 'libro/autor/crear_autor.html'
	success_url = reverse_lazy('libro:listar_autor')	

class EliminarAutor(DeleteView):
	model = Autor
	template_name = 'libro/autor/eliminar_autor.html'
	success_url = reverse_lazy('libro:listar_autor')
	
	
	
********vistas basadas en funciones*********
from django.shortcuts import render,get_object_or_404
from .models import Post,Categoria
from django.db.models import Q
from django.core.paginator import Paginator
from django.contrib.auth.decorators import login_required,permission_required

@login_required(login_url='/dashboard/')
@permission_required('app.view_home',login_url='app:login')
def home(request):
	buscar = request.GET.get("buscar")
	posts = Post.objects.filter(estado = True)
	if buscar:
		posts=Post.objects.filter(Q(titulo__icontains = buscar)|Q(descripcion__icontains = buscar),estado = True).distinct()
	paginator = Paginator(posts, 2)

	page = request.GET.get('page')
	posts = paginator.get_page(page)
	return render(request,'index.html',{'posts':posts})

def detallePost(request,slug):
	post = get_object_or_404(Post,slug = slug)
	return render(request,'post.html',{'detalle_post':post})

		
